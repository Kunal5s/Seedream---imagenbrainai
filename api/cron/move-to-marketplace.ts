// api/cron/move-to-marketplace.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { db } from '../../services/firebase';
import { GoogleGenAI, Type } from '@google/genai';

const HISTORY_LIMIT = 30;
const PURCHASE_LINK = 'https://buy.polar.sh/polar_cl_Dq1dKRQK58YEweEc0gwvPacYvNAY9ANcV34G36N0'; // Example link

// Function to generate a random price for the marketplace item
const getRandomPrice = () => {
    const roll = Math.random();
    if (roll < 0.05) return Math.floor(Math.random() * (1000 - 501 + 1)) + 501; // 5% chance for high price
    if (roll < 0.15) return Math.floor(Math.random() * (500 - 151 + 1)) + 151; // 10% chance for medium price
    return Math.floor(Math.random() * (150 - 20 + 1)) + 20; // 85% chance for standard price
};

// Function to generate engaging metadata for the artwork using Gemini AI
async function generateMarketplaceMetadata(prompt: string): Promise<{ title: string; description: string }> {
    if (!process.env.API_KEY) {
        console.warn("API_KEY is not set. Using fallback metadata.");
        return { 
            title: 'Intriguing AI Generated Masterpiece', 
            description: 'This captivating artwork, born from a digital mind, offers a unique glimpse into the boundless possibilities of creative artificial intelligence for your collection.' 
        };
    }
    try {
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `Based on the following image prompt, generate metadata for an art marketplace listing. The tone should be enticing and professional. Prompt: "${prompt}"`,
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        title: { type: Type.STRING, description: 'An engaging, creative title for the artwork, exactly 6 words long.' },
                        description: { type: Type.STRING, description: 'A compelling, descriptive summary of the artwork, exactly 23 words long, to attract buyers.' }
                    },
                    required: ["title", "description"]
                }
            }
        });
        const metadata = JSON.parse(response.text.trim());
        return { title: metadata.title, description: metadata.description };
    } catch (error) {
        console.error("Error generating metadata with Gemini:", error);
        return {
            title: 'Captivating and Unique AI Artwork',
            description: 'Explore a visually stunning piece generated by advanced AI, perfect for any digital art enthusiast looking to own a truly one-of-a-kind creation.'
        };
    }
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Simple auth check to ensure it's triggered by Vercel Cron, not a random user
  if (req.headers['authorization'] !== `Bearer ${process.env.CRON_SECRET}`) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  try {
    const imagesRef = db.collection('images');
    const usersWithManyImagesSnapshot = await imagesRef
      .where('marketplaceStatus', '==', 'private')
      .get();
      
    const userImageCounts: { [userId: string]: any[] } = {};
    usersWithManyImagesSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.userId) {
        if (!userImageCounts[data.userId]) {
          userImageCounts[data.userId] = [];
        }
        userImageCounts[data.userId].push({ id: doc.id, ...data });
      }
    });

    let movedCount = 0;
    for (const userId in userImageCounts) {
      if (userImageCounts[userId].length > HISTORY_LIMIT) {
        // Sort images by creation date to find the oldest
        const userImages = userImageCounts[userId].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
        const imagesToMove = userImages.slice(0, userImages.length - HISTORY_LIMIT);

        for (const image of imagesToMove) {
          const metadata = await generateMarketplaceMetadata(image.fullPrompt);
          const imageRef = imagesRef.doc(image.id);
          await imageRef.update({
            marketplaceStatus: 'live',
            price: getRandomPrice(),
            purchaseLink: PURCHASE_LINK,
            title: metadata.title,
            description: metadata.description,
          });
          movedCount++;
          console.log(`Moved image ${image.id} for user ${userId} to marketplace.`);
        }
      }
    }

    res.status(200).json({ message: `Cron job completed. Moved ${movedCount} images to the marketplace.` });
  } catch (error) {
    console.error('Cron job error:', error);
    res.status(500).json({ message: 'An error occurred during the cron job execution.' });
  }
}